// Create an actors node
LOAD CSV WITH HEADERS FROM "file:///actors.csv" AS row FIELDTERMINATOR ';'
CREATE (:actors {actorid: row.actorid, name: row.name, sex: row.sex});

// Create a directors node
LOAD CSV WITH HEADERS FROM "file:///directors.csv" AS row FIELDTERMINATOR ';'
CREATE (:directors {directorid: row.directorid, name: row.name, rate: toFloat(row.rate), gross: toFloat(row.gross), num: row.num});

// Create a movies node
LOAD CSV WITH HEADERS FROM "file:///movies.csv" AS row FIELDTERMINATOR ';'
CREATE (:movies {movieid: row.movieid, title: row.title, year: row.year});

//Create a writers node
LOAD CSV WITH HEADERS FROM "file:///writers.csv" AS row FIELDTERMINATOR ';'
CREATE (:writers {writerid: row.writerid, name: row.name});

//this creates a way to quick lookup on the nodes
CREATE INDEX ON :actors(actorid);
CREATE INDEX ON :directors(directorid);
CREATE INDEX ON :movies(movieid);
CREATE INDEX ON :writers(writerid);

//link between movies and actors
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///moviestoactors.csv" AS row FIELDTERMINATOR ';'
MATCH (actors:actors {actorid: row.actorid})
MATCH (movies:movies {movieid: row.movieid})
MERGE (movies)-[c:casts]->(actors)
ON CREATE SET c.as_character = row.as_character, c.leading = row.leading;

//link between movies and directors
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///moviestodirectors.csv" AS row FIELDTERMINATOR ';'
MATCH (directors:directors {directorid: row.directorid})
MATCH (movies:movies {movieid: row.movieid})
MERGE (movies)-[d:directed_by]->(directors)
ON CREATE SET d.genre = row.genre;

//link between movies and writers
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///moviestowriters.csv" AS row FIELDTERMINATOR ';'
MATCH (writers:writers {writerid: row.writerid})
MATCH (movies:movies {movieid: row.movieid})
MERGE (movies)-[w:written_by]->(writers)
ON CREATE SET w.addition = row.addition;

//create and link movies to ratings
USING PERIODIC COMMIT 
LOAD CSV WITH HEADERS FROM "file:///ratings.csv" AS row FIELDTERMINATOR ';'
MATCH (m:movies {movieid: row.movieid})
CREATE (r:ratings)
SET r+= row
CREATE (m)-[:has_rating]->(r)

//create and link movies to runtime
USING PERIODIC COMMIT 
LOAD CSV WITH HEADERS FROM "file:///runningtimes.csv" AS row FIELDTERMINATOR ';'
MATCH (m:movies {movieid: row.movieid})
CREATE (t:runtime)
SET t+= row
CREATE (m)-[:length]->(t)

#return 100 actors
MATCH (a:actors)
RETURN a
LIMIT 100;

#just return data from the movie node, casts relation and the actor node
MATCH path = (m:movies)-[c:casts]->(a:actors)
RETURN m.movieid AS MovieID, m.title AS MovieTitle, a.actorid AS ActorID, a.name AS ActorsName, c.as_character AS CharacterName, c.leading as Leading
LIMIT 100;


//Ridwans cyphers for task 3
//1: COUNT MALES
MATCH (a:actors)  
WHERE a.sex="M" 
RETURN COUNT(a) AS MaleCount
//Answer is 65794


//2: COUNT FEMALES
MATCH (a:actors)  
WHERE a.sex="F" 
RETURN COUNT(a) AS FemaleCount
//Answer is 32896

//Callum
//3 male and female count in 1 query
MATCH(a:actors)
return a.sex, COUNT(*)

//4:List the movie titles and number of directors involved for movies with more than 6directors
MATCH (m:movies)-[d:directed_by]->(dir: directors)
WITH m, count(dir.name) AS DirectorCount
WHERE DirectorCount > 6
RETURN m.title, DirectorCount
//Answer
//"Fantasia (1940)"	11
//"Fantasia/2000 (1999)"	8
//"Bambi (1942)"	7
//"Dumbo (1941)"	7
//"Duel in the Sun (1946)"	7
//"Pinocchio (1940)"	7


//5 count running time <10 mins
match(t:runtime)
where toInteger(t.time) < 10
return count(t) as LessThanTen

//Mark Cypher
//6:Movies with Ewan McGregor and Robert Carlyle
MATCH (m:movies),(o:actors {name:"McGregor, Ewan"}), (r:actors {name:"Carlyle, Robert (I)"})
WHERE (m)-[:casts]->(o) AND (m)-[:casts]->(r)
RETURN m.title AS movieTitles
//Answer:
//"Being Human (1994)"
//"Trainspotting (1996)"

//7 Movies Directed by Spielberg
MATCH (m:movies)-[:directed_by]->(d:directors {name:"Spielberg, Steven"})
RETURN count(m) AS SpielbergMovies
//Answer is 14

//9
optional match(m:movies)
where tointeger(m.year) > 1959 AND tointeger(m.year) < 1970
with count(m) as sixties
optional match(m:movies)
where tointeger(m.year) > 1969 AND tointeger(m.year) < 1980
with count(m) as seventies, sixties
optional match(m:movies)
where tointeger(m.year) > 1979 AND tointeger(m.year) < 1990
with count(m) as eighties, seventies, sixties
optional match(m:movies)
where tointeger(m.year) > 1989 AND tointeger(m.year) < 2000
with count(m) as nineties, eighties, seventies, sixties
optional match(m:movies)
where tointeger(m.year) > 1999 AND tointeger(m.year) < 2010
with count(m) as twothousands, nineties, eighties, seventies, sixties
return sixties, seventies, eighties, nineties, twothousands

//10 How many movies have more female actorsthan male actors?
MATCH (ma:actors {sex:"M"})<-[casts]-(m:movies)-[c:casts]->(fa:actors {sex:"F"})
WITH m, count(DISTINCT ma) AS MaleCount, count(DISTINCT fa) AS FemaleCount
WHERE FemaleCount > MaleCount
RETURN count(m)
//Answer 
//324


//11 Based ratings with 10,000 or more votes, what are the top 3 movie genres usingthe average rank per movie genreas the metric?(Note: where a higher value for rankis considered a better movie)
MATCH (r:ratings)<-[has_rating]-(m:movies)-[d:directed_by]->(directors)
WHERE toInt(r.votes)>10000
RETURN avg(toInt(r.rank)) AS averageRank, d.genre
ORDER BY averageRank DESC
LIMIT 3
//Answer is:
//7.625	"Western"
//7.6	"Documentary"
//7.5	"Film-Noir"


//12 Show the shortest path between actors ‘Ewan McGregor’ and ‘Mark Hamill’ from the IMDB data subset.  Include nodes and edges –answer can be shown as an image or text description in form (a)-[ ]->(b)-[ ]-> (c)..
MATCH (a:actors {name:"McGregor, Ewan"}), (h:actors {name:"Hamill, Mark (I)"}),
p = shortestPath((a)-[*]-(h)) 
WHERE a.name = "McGregor, Ewan" AND h.name = "Hamill, Mark (I)"
RETURN p
//Answer 
//take screenshot

//13 List all actors(male/female) that have starred in 10 or moredifferent film genres  (show names, and number of genres)
MATCH (a:actors)<-[casts]-(m:movies)-[d:directed_by]->(directors)
WITH a, count(DISTINCT d.genre) AS GenreCount
WHERE GenreCount >= 10
RETURN a.name, GenreCount
//Answer
//"Peck, Gregory"	10

//14 
MATCH (a:actors)<-[casts]-(m:movies)-[d:directed_by]->(dir: directors)
WHERE a.name = dir.name
RETURN count(m) AS MovieCount
//Answer
//496


